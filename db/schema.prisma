generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["groupBy"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coach {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  handle      String   @unique
  name        String   @unique
  teamId      Int?
  type        String?
  isAssistant String?
  team        Team?    @relation(fields: [teamId], references: [id])
}

model Player {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime
  handle    String   @unique
  name      String   @unique
  slug      String   @unique
  teamId    Int?
  height    String
  weight    String
  number    String?
  position  String?
  team      Team?    @relation(fields: [teamId], references: [id])
}

model ColorScheme {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime
  primary   String
  secondary String
  teamId    Int?
  team      Team?    @relation(fields: [teamId], references: [id])
}

model Team {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  handle         String        @unique
  name           String        @unique
  slug           String        @unique
  city           String
  abbreviation   String        @unique
  logo           String        @unique
  logoSlug       String        @unique
  wins           Int?
  losses         Int?
  winPercentage  Float?
  conference     String
  division       String
  established    String
  primaryColor   String
  secondaryColor String
  coaches        Coach[]
  colorScheme    ColorScheme[]
  players        Player[]
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}
